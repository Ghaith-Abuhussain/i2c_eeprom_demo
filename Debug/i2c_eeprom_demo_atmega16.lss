
i2c_eeprom_demo_atmega16.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000041e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000e2  00800060  0000041e  000004b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000080  00800142  00800142  00000594  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000594  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000005c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  00000600  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001080  00000000  00000000  000006d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008d2  00000000  00000000  00001750  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008eb  00000000  00000000  00002022  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000210  00000000  00000000  00002910  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004f4  00000000  00000000  00002b20  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008f8  00000000  00000000  00003014  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  0000390c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e1       	ldi	r30, 0x1E	; 30
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 34       	cpi	r26, 0x42	; 66
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	a2 e4       	ldi	r26, 0x42	; 66
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 3c       	cpi	r26, 0xC2	; 194
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 72 01 	call	0x2e4	; 0x2e4 <main>
  8a:	0c 94 0d 02 	jmp	0x41a	; 0x41a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <I2C_Init>:
/* Define bit rate */

void I2C_Init()			/* I2C initialize function */
{
	//TWBR = BITRATE(TWSR=0x00);	/* Get bit rate register value by formula */
	TWBR = 5;
  92:	85 e0       	ldi	r24, 0x05	; 5
  94:	80 b9       	out	0x00, r24	; 0
	TWSR &= (~((1<<TWPS1)|(1<<TWPS0)));
  96:	81 b1       	in	r24, 0x01	; 1
  98:	8c 7f       	andi	r24, 0xFC	; 252
  9a:	81 b9       	out	0x01, r24	; 1
  9c:	08 95       	ret

0000009e <I2C_Start>:
}

uint8_t I2C_Start(char write_address)/* I2C start function */
{
	uint8_t status;		/* Declare variable */
	TWCR=(1<<TWSTA)|(1<<TWEN)|(1<<TWINT); /* Enable TWI, generate START */
  9e:	94 ea       	ldi	r25, 0xA4	; 164
  a0:	96 bf       	out	0x36, r25	; 54
	while(!(TWCR&(1<<TWINT)));	/* Wait until TWI finish its current job */
  a2:	06 b6       	in	r0, 0x36	; 54
  a4:	07 fe       	sbrs	r0, 7
  a6:	fd cf       	rjmp	.-6      	; 0xa2 <I2C_Start+0x4>
	status=TWSR&0xF8;		/* Read TWI status register */
  a8:	91 b1       	in	r25, 0x01	; 1
  aa:	98 7f       	andi	r25, 0xF8	; 248
	if(status!=0x08)		/* Check weather START transmitted or not? */
  ac:	98 30       	cpi	r25, 0x08	; 8
  ae:	71 f4       	brne	.+28     	; 0xcc <I2C_Start+0x2e>
	return 0;			/* Return 0 to indicate start condition fail */
	TWDR = write_address;		/* Write SLA+W in TWI data register */
  b0:	83 b9       	out	0x03, r24	; 3
	TWCR=(1<<TWEN)|(1<<TWINT);	/* Enable TWI & clear interrupt flag */
  b2:	84 e8       	ldi	r24, 0x84	; 132
  b4:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR&(1<<TWINT)));	/* Wait until TWI finish its current job */
  b6:	06 b6       	in	r0, 0x36	; 54
  b8:	07 fe       	sbrs	r0, 7
  ba:	fd cf       	rjmp	.-6      	; 0xb6 <I2C_Start+0x18>
	status=TWSR&0xF8;		/* Read TWI status register */
  bc:	81 b1       	in	r24, 0x01	; 1
  be:	88 7f       	andi	r24, 0xF8	; 248
	if(status==0x18)		/* Check for SLA+W transmitted &ack received */
  c0:	88 31       	cpi	r24, 0x18	; 24
  c2:	31 f0       	breq	.+12     	; 0xd0 <I2C_Start+0x32>
	return 1;			/* Return 1 to indicate ack received */
	if(status==0x20)		/* Check for SLA+W transmitted &nack received */
  c4:	80 32       	cpi	r24, 0x20	; 32
  c6:	31 f4       	brne	.+12     	; 0xd4 <I2C_Start+0x36>
	return 2;			/* Return 2 to indicate nack received */
  c8:	82 e0       	ldi	r24, 0x02	; 2
  ca:	08 95       	ret
	uint8_t status;		/* Declare variable */
	TWCR=(1<<TWSTA)|(1<<TWEN)|(1<<TWINT); /* Enable TWI, generate START */
	while(!(TWCR&(1<<TWINT)));	/* Wait until TWI finish its current job */
	status=TWSR&0xF8;		/* Read TWI status register */
	if(status!=0x08)		/* Check weather START transmitted or not? */
	return 0;			/* Return 0 to indicate start condition fail */
  cc:	80 e0       	ldi	r24, 0x00	; 0
  ce:	08 95       	ret
	TWDR = write_address;		/* Write SLA+W in TWI data register */
	TWCR=(1<<TWEN)|(1<<TWINT);	/* Enable TWI & clear interrupt flag */
	while(!(TWCR&(1<<TWINT)));	/* Wait until TWI finish its current job */
	status=TWSR&0xF8;		/* Read TWI status register */
	if(status==0x18)		/* Check for SLA+W transmitted &ack received */
	return 1;			/* Return 1 to indicate ack received */
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	08 95       	ret
	if(status==0x20)		/* Check for SLA+W transmitted &nack received */
	return 2;			/* Return 2 to indicate nack received */
	else
	return 3;			/* Else return 3 to indicate SLA+W failed */
  d4:	83 e0       	ldi	r24, 0x03	; 3
}
  d6:	08 95       	ret

000000d8 <I2C_Repeated_Start>:

uint8_t I2C_Repeated_Start(char read_address) /* I2C repeated start function */
{
	uint8_t status;		/* Declare variable */
	TWCR=(1<<TWSTA)|(1<<TWEN)|(1<<TWINT);/* Enable TWI, generate start */
  d8:	94 ea       	ldi	r25, 0xA4	; 164
  da:	96 bf       	out	0x36, r25	; 54
	while(!(TWCR&(1<<TWINT)));	/* Wait until TWI finish its current job */
  dc:	06 b6       	in	r0, 0x36	; 54
  de:	07 fe       	sbrs	r0, 7
  e0:	fd cf       	rjmp	.-6      	; 0xdc <I2C_Repeated_Start+0x4>
	status=TWSR&0xF8;		/* Read TWI status register */
  e2:	91 b1       	in	r25, 0x01	; 1
  e4:	98 7f       	andi	r25, 0xF8	; 248
	if(status!=0x10)		/* Check for repeated start transmitted */
  e6:	90 31       	cpi	r25, 0x10	; 16
  e8:	71 f4       	brne	.+28     	; 0x106 <I2C_Repeated_Start+0x2e>
	return 0;			/* Return 0 for repeated start condition fail */
	TWDR=read_address;		/* Write SLA+R in TWI data register */
  ea:	83 b9       	out	0x03, r24	; 3
	TWCR=(1<<TWEN)|(1<<TWINT);	/* Enable TWI and clear interrupt flag */
  ec:	84 e8       	ldi	r24, 0x84	; 132
  ee:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR&(1<<TWINT)));	/* Wait until TWI finish its current job */
  f0:	06 b6       	in	r0, 0x36	; 54
  f2:	07 fe       	sbrs	r0, 7
  f4:	fd cf       	rjmp	.-6      	; 0xf0 <I2C_Repeated_Start+0x18>
	status=TWSR&0xF8;		/* Read TWI status register */
  f6:	81 b1       	in	r24, 0x01	; 1
  f8:	88 7f       	andi	r24, 0xF8	; 248
	if(status==0x40)		/* Check for SLA+R transmitted &ack received */
  fa:	80 34       	cpi	r24, 0x40	; 64
  fc:	31 f0       	breq	.+12     	; 0x10a <I2C_Repeated_Start+0x32>
	return 1;			/* Return 1 to indicate ack received */
	if(status==0x48)		/* Check for SLA+R transmitted &nack received */
  fe:	88 34       	cpi	r24, 0x48	; 72
 100:	31 f4       	brne	.+12     	; 0x10e <I2C_Repeated_Start+0x36>
	return 2;			/* Return 2 to indicate nack received */
 102:	82 e0       	ldi	r24, 0x02	; 2
 104:	08 95       	ret
	uint8_t status;		/* Declare variable */
	TWCR=(1<<TWSTA)|(1<<TWEN)|(1<<TWINT);/* Enable TWI, generate start */
	while(!(TWCR&(1<<TWINT)));	/* Wait until TWI finish its current job */
	status=TWSR&0xF8;		/* Read TWI status register */
	if(status!=0x10)		/* Check for repeated start transmitted */
	return 0;			/* Return 0 for repeated start condition fail */
 106:	80 e0       	ldi	r24, 0x00	; 0
 108:	08 95       	ret
	TWDR=read_address;		/* Write SLA+R in TWI data register */
	TWCR=(1<<TWEN)|(1<<TWINT);	/* Enable TWI and clear interrupt flag */
	while(!(TWCR&(1<<TWINT)));	/* Wait until TWI finish its current job */
	status=TWSR&0xF8;		/* Read TWI status register */
	if(status==0x40)		/* Check for SLA+R transmitted &ack received */
	return 1;			/* Return 1 to indicate ack received */
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	08 95       	ret
	if(status==0x48)		/* Check for SLA+R transmitted &nack received */
	return 2;			/* Return 2 to indicate nack received */
	else
	return 3;			/* Else return 3 to indicate SLA+W failed */
 10e:	83 e0       	ldi	r24, 0x03	; 3
}
 110:	08 95       	ret

00000112 <I2C_Write>:

uint8_t I2C_Write(char data)	/* I2C write function */
{
	uint8_t status;		/* Declare variable */
	TWDR=data;			/* Copy data in TWI data register */
 112:	83 b9       	out	0x03, r24	; 3
	TWCR=(1<<TWEN)|(1<<TWINT);	/* Enable TWI and clear interrupt flag */
 114:	84 e8       	ldi	r24, 0x84	; 132
 116:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR&(1<<TWINT)));	/* Wait until TWI finish its current job */
 118:	06 b6       	in	r0, 0x36	; 54
 11a:	07 fe       	sbrs	r0, 7
 11c:	fd cf       	rjmp	.-6      	; 0x118 <I2C_Write+0x6>
		status=TWSR&0xF8;		/* Read TWI status register */
 11e:	81 b1       	in	r24, 0x01	; 1
 120:	88 7f       	andi	r24, 0xF8	; 248
		if(status==0x28)		/* Check for data transmitted &ack received */
 122:	88 32       	cpi	r24, 0x28	; 40
 124:	21 f0       	breq	.+8      	; 0x12e <I2C_Write+0x1c>
		return 0;			/* Return 0 to indicate ack received */
		if(status==0x30)		/* Check for data transmitted &nack received */
 126:	80 33       	cpi	r24, 0x30	; 48
 128:	21 f4       	brne	.+8      	; 0x132 <I2C_Write+0x20>
		return 1;			/* Return 1 to indicate nack received */
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	08 95       	ret
	TWDR=data;			/* Copy data in TWI data register */
	TWCR=(1<<TWEN)|(1<<TWINT);	/* Enable TWI and clear interrupt flag */
	while(!(TWCR&(1<<TWINT)));	/* Wait until TWI finish its current job */
		status=TWSR&0xF8;		/* Read TWI status register */
		if(status==0x28)		/* Check for data transmitted &ack received */
		return 0;			/* Return 0 to indicate ack received */
 12e:	80 e0       	ldi	r24, 0x00	; 0
 130:	08 95       	ret
		if(status==0x30)		/* Check for data transmitted &nack received */
		return 1;			/* Return 1 to indicate nack received */
		else
		return 2;			/* Else return 2 for data transmission failure */
 132:	82 e0       	ldi	r24, 0x02	; 2
}
 134:	08 95       	ret

00000136 <I2C_Read_Ack>:

char I2C_Read_Ack()		/* I2C read ack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWEA); /* Enable TWI, generation of ack */
 136:	84 ec       	ldi	r24, 0xC4	; 196
 138:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR&(1<<TWINT)));	/* Wait until TWI finish its current job */
 13a:	06 b6       	in	r0, 0x36	; 54
 13c:	07 fe       	sbrs	r0, 7
 13e:	fd cf       	rjmp	.-6      	; 0x13a <I2C_Read_Ack+0x4>
	return TWDR;			/* Return received data */
 140:	83 b1       	in	r24, 0x03	; 3
}
 142:	08 95       	ret

00000144 <I2C_Read_Nack>:

char I2C_Read_Nack()		/* I2C read nack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT);	/* Enable TWI and clear interrupt flag */
 144:	84 e8       	ldi	r24, 0x84	; 132
 146:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR&(1<<TWINT)));	/* Wait until TWI finish its current job */
 148:	06 b6       	in	r0, 0x36	; 54
 14a:	07 fe       	sbrs	r0, 7
 14c:	fd cf       	rjmp	.-6      	; 0x148 <I2C_Read_Nack+0x4>
	return TWDR;		/* Return received data */
 14e:	83 b1       	in	r24, 0x03	; 3
}
 150:	08 95       	ret

00000152 <I2C_Stop>:

void I2C_Stop()			/* I2C stop function */
{
	TWCR=(1<<TWSTO)|(1<<TWINT)|(1<<TWEN);/* Enable TWI, generate stop */
 152:	84 e9       	ldi	r24, 0x94	; 148
 154:	86 bf       	out	0x36, r24	; 54
	while(TWCR&(1<<TWSTO));	/* Wait until stop condition execution */
 156:	06 b6       	in	r0, 0x36	; 54
 158:	04 fc       	sbrc	r0, 4
 15a:	fd cf       	rjmp	.-6      	; 0x156 <I2C_Stop+0x4>
}
 15c:	08 95       	ret

0000015e <write_to_eeprom>:

unsigned char write_to_eeprom(unsigned char eeprom_write_address, uint16_t address, int num_bytes, unsigned char bytes_to_write[])
{
 15e:	ef 92       	push	r14
 160:	ff 92       	push	r15
 162:	0f 93       	push	r16
 164:	1f 93       	push	r17
 166:	cf 93       	push	r28
 168:	df 93       	push	r29
 16a:	d6 2f       	mov	r29, r22
 16c:	c7 2f       	mov	r28, r23
 16e:	8a 01       	movw	r16, r20
 170:	79 01       	movw	r14, r18
	if(I2C_Start(EEPROM_Write_Addess) == 3)              /* Start I2C with device write address */
 172:	80 ea       	ldi	r24, 0xA0	; 160
 174:	0e 94 4f 00 	call	0x9e	; 0x9e <I2C_Start>
 178:	83 30       	cpi	r24, 0x03	; 3
 17a:	11 f1       	breq	.+68     	; 0x1c0 <write_to_eeprom+0x62>
	{
		//USART0_SendString("Failure With I2C_START\n");
		return 0x01;
	}
	if(I2C_Write((address >> 8) & 0xff) == 2)		/* Write MSB memory address for data write */
 17c:	8c 2f       	mov	r24, r28
 17e:	0e 94 89 00 	call	0x112	; 0x112 <I2C_Write>
 182:	82 30       	cpi	r24, 0x02	; 2
 184:	11 f1       	breq	.+68     	; 0x1ca <write_to_eeprom+0x6c>
	{
		//USART0_SendString("Failure With I2C_Write MSB ADDRESS\n");
		return 0x02;
	}
	if(I2C_Write(address & 0xff) == 2)		/* Write LSB memory address for data write */
 186:	8d 2f       	mov	r24, r29
 188:	0e 94 89 00 	call	0x112	; 0x112 <I2C_Write>
 18c:	82 30       	cpi	r24, 0x02	; 2
 18e:	d1 f0       	breq	.+52     	; 0x1c4 <write_to_eeprom+0x66>
 190:	c0 e0       	ldi	r28, 0x00	; 0
 192:	d0 e0       	ldi	r29, 0x00	; 0
 194:	09 c0       	rjmp	.+18     	; 0x1a8 <write_to_eeprom+0x4a>
		//USART0_SendString("Failure With I2C_Write LSB ADDRESS\n");
		return 0x03;
	}
	for (int i = 0; i<num_bytes; i++)/* Write array data */
	{
		if(I2C_Write(bytes_to_write[i]) == 2)		/* Write start memory address for data write */
 196:	f7 01       	movw	r30, r14
 198:	ec 0f       	add	r30, r28
 19a:	fd 1f       	adc	r31, r29
 19c:	80 81       	ld	r24, Z
 19e:	0e 94 89 00 	call	0x112	; 0x112 <I2C_Write>
 1a2:	82 30       	cpi	r24, 0x02	; 2
 1a4:	89 f0       	breq	.+34     	; 0x1c8 <write_to_eeprom+0x6a>
	if(I2C_Write(address & 0xff) == 2)		/* Write LSB memory address for data write */
	{
		//USART0_SendString("Failure With I2C_Write LSB ADDRESS\n");
		return 0x03;
	}
	for (int i = 0; i<num_bytes; i++)/* Write array data */
 1a6:	21 96       	adiw	r28, 0x01	; 1
 1a8:	c0 17       	cp	r28, r16
 1aa:	d1 07       	cpc	r29, r17
 1ac:	a4 f3       	brlt	.-24     	; 0x196 <write_to_eeprom+0x38>
		{
			//USART0_SendString("Failure With I2C_Write array Byte\n");
			return 0x04;
		}
	}
	I2C_Stop();
 1ae:	0e 94 a9 00 	call	0x152	; 0x152 <I2C_Stop>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b2:	83 ed       	ldi	r24, 0xD3	; 211
 1b4:	90 e3       	ldi	r25, 0x30	; 48
 1b6:	01 97       	sbiw	r24, 0x01	; 1
 1b8:	f1 f7       	brne	.-4      	; 0x1b6 <write_to_eeprom+0x58>
 1ba:	00 c0       	rjmp	.+0      	; 0x1bc <write_to_eeprom+0x5e>
 1bc:	00 00       	nop
	_delay_ms(50);
}
 1be:	05 c0       	rjmp	.+10     	; 0x1ca <write_to_eeprom+0x6c>
unsigned char write_to_eeprom(unsigned char eeprom_write_address, uint16_t address, int num_bytes, unsigned char bytes_to_write[])
{
	if(I2C_Start(EEPROM_Write_Addess) == 3)              /* Start I2C with device write address */
	{
		//USART0_SendString("Failure With I2C_START\n");
		return 0x01;
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	03 c0       	rjmp	.+6      	; 0x1ca <write_to_eeprom+0x6c>
		return 0x02;
	}
	if(I2C_Write(address & 0xff) == 2)		/* Write LSB memory address for data write */
	{
		//USART0_SendString("Failure With I2C_Write LSB ADDRESS\n");
		return 0x03;
 1c4:	83 e0       	ldi	r24, 0x03	; 3
 1c6:	01 c0       	rjmp	.+2      	; 0x1ca <write_to_eeprom+0x6c>
	for (int i = 0; i<num_bytes; i++)/* Write array data */
	{
		if(I2C_Write(bytes_to_write[i]) == 2)		/* Write start memory address for data write */
		{
			//USART0_SendString("Failure With I2C_Write array Byte\n");
			return 0x04;
 1c8:	84 e0       	ldi	r24, 0x04	; 4
		}
	}
	I2C_Stop();
	_delay_ms(50);
}
 1ca:	df 91       	pop	r29
 1cc:	cf 91       	pop	r28
 1ce:	1f 91       	pop	r17
 1d0:	0f 91       	pop	r16
 1d2:	ff 90       	pop	r15
 1d4:	ef 90       	pop	r14
 1d6:	08 95       	ret

000001d8 <read_from_eeprom>:

unsigned char read_from_eeprom(unsigned char eeprom_write_address,
								unsigned char eeprom_read_address, uint16_t address, int num_bytes, unsigned char bytes_to_write[])
{
 1d8:	cf 92       	push	r12
 1da:	df 92       	push	r13
 1dc:	ef 92       	push	r14
 1de:	ff 92       	push	r15
 1e0:	0f 93       	push	r16
 1e2:	1f 93       	push	r17
 1e4:	cf 93       	push	r28
 1e6:	df 93       	push	r29
 1e8:	d4 2f       	mov	r29, r20
 1ea:	c5 2f       	mov	r28, r21
 1ec:	79 01       	movw	r14, r18
	memset(bytes_to_write, 0, sizeof(bytes_to_write));
 1ee:	f8 01       	movw	r30, r16
 1f0:	11 82       	std	Z+1, r1	; 0x01
 1f2:	10 82       	st	Z, r1
	if(I2C_Start(EEPROM_Write_Addess) == 3)/* Start I2C with device write address */
 1f4:	80 ea       	ldi	r24, 0xA0	; 160
 1f6:	0e 94 4f 00 	call	0x9e	; 0x9e <I2C_Start>
 1fa:	83 30       	cpi	r24, 0x03	; 3
 1fc:	41 f1       	breq	.+80     	; 0x24e <__EEPROM_REGION_LENGTH__+0x4e>
	{
		//USART0_SendString("Failure With I2C_Start Read\n");
		return 0x01;
	}
	if(I2C_Write((address >> 8) & 0xff) == 2)		/* Write start memory address for data write */
 1fe:	8c 2f       	mov	r24, r28
 200:	0e 94 89 00 	call	0x112	; 0x112 <I2C_Write>
 204:	82 30       	cpi	r24, 0x02	; 2
 206:	41 f1       	breq	.+80     	; 0x258 <__EEPROM_REGION_LENGTH__+0x58>
	{
		//USART0_SendString("Failure With I2C_Write MSB ADDRESS Read\n");
		return 0x02;
	}
	if(I2C_Write(address & 0xff) == 2)		/* Write start memory address for data write */
 208:	8d 2f       	mov	r24, r29
 20a:	0e 94 89 00 	call	0x112	; 0x112 <I2C_Write>
 20e:	82 30       	cpi	r24, 0x02	; 2
 210:	01 f1       	breq	.+64     	; 0x252 <__EEPROM_REGION_LENGTH__+0x52>
	{
		//USART0_SendString("Failure With I2C_Write MSB ADDRESS Read\n");
		return 0x03;
	}
	if(I2C_Repeated_Start(EEPROM_Read_Addess) == 3)/* Repeat start I2C SLA+R */
 212:	81 ea       	ldi	r24, 0xA1	; 161
 214:	0e 94 6c 00 	call	0xd8	; 0xd8 <I2C_Repeated_Start>
 218:	83 30       	cpi	r24, 0x03	; 3
 21a:	e9 f0       	breq	.+58     	; 0x256 <__EEPROM_REGION_LENGTH__+0x56>
 21c:	c0 e0       	ldi	r28, 0x00	; 0
 21e:	d0 e0       	ldi	r29, 0x00	; 0
 220:	08 c0       	rjmp	.+16     	; 0x232 <__EEPROM_REGION_LENGTH__+0x32>
		return 0x04;
	}
	for (int i = 0; i < num_bytes - 1; i++)/* Read data with acknowledgment */
	{
		//USART0_TxChar(0xE0);
		bytes_to_write[i] = I2C_Read_Ack();
 222:	68 01       	movw	r12, r16
 224:	cc 0e       	add	r12, r28
 226:	dd 1e       	adc	r13, r29
 228:	0e 94 9b 00 	call	0x136	; 0x136 <I2C_Read_Ack>
 22c:	f6 01       	movw	r30, r12
 22e:	80 83       	st	Z, r24
	if(I2C_Repeated_Start(EEPROM_Read_Addess) == 3)/* Repeat start I2C SLA+R */
	{
		//USART0_SendString("Failure With I2C_Repeated_Start Read\n");
		return 0x04;
	}
	for (int i = 0; i < num_bytes - 1; i++)/* Read data with acknowledgment */
 230:	21 96       	adiw	r28, 0x01	; 1
 232:	c7 01       	movw	r24, r14
 234:	01 97       	sbiw	r24, 0x01	; 1
 236:	c8 17       	cp	r28, r24
 238:	d9 07       	cpc	r29, r25
 23a:	9c f3       	brlt	.-26     	; 0x222 <__EEPROM_REGION_LENGTH__+0x22>
	{
		//USART0_TxChar(0xE0);
		bytes_to_write[i] = I2C_Read_Ack();
	}
	bytes_to_write[num_bytes - 1] = I2C_Read_Nack();
 23c:	e8 01       	movw	r28, r16
 23e:	c8 0f       	add	r28, r24
 240:	d9 1f       	adc	r29, r25
 242:	0e 94 a2 00 	call	0x144	; 0x144 <I2C_Read_Nack>
 246:	88 83       	st	Y, r24
	I2C_Stop();			/* Stop I2C */
 248:	0e 94 a9 00 	call	0x152	; 0x152 <I2C_Stop>
}
 24c:	05 c0       	rjmp	.+10     	; 0x258 <__EEPROM_REGION_LENGTH__+0x58>
{
	memset(bytes_to_write, 0, sizeof(bytes_to_write));
	if(I2C_Start(EEPROM_Write_Addess) == 3)/* Start I2C with device write address */
	{
		//USART0_SendString("Failure With I2C_Start Read\n");
		return 0x01;
 24e:	81 e0       	ldi	r24, 0x01	; 1
 250:	03 c0       	rjmp	.+6      	; 0x258 <__EEPROM_REGION_LENGTH__+0x58>
		return 0x02;
	}
	if(I2C_Write(address & 0xff) == 2)		/* Write start memory address for data write */
	{
		//USART0_SendString("Failure With I2C_Write MSB ADDRESS Read\n");
		return 0x03;
 252:	83 e0       	ldi	r24, 0x03	; 3
 254:	01 c0       	rjmp	.+2      	; 0x258 <__EEPROM_REGION_LENGTH__+0x58>
	}
	if(I2C_Repeated_Start(EEPROM_Read_Addess) == 3)/* Repeat start I2C SLA+R */
	{
		//USART0_SendString("Failure With I2C_Repeated_Start Read\n");
		return 0x04;
 256:	84 e0       	ldi	r24, 0x04	; 4
		//USART0_TxChar(0xE0);
		bytes_to_write[i] = I2C_Read_Ack();
	}
	bytes_to_write[num_bytes - 1] = I2C_Read_Nack();
	I2C_Stop();			/* Stop I2C */
}
 258:	df 91       	pop	r29
 25a:	cf 91       	pop	r28
 25c:	1f 91       	pop	r17
 25e:	0f 91       	pop	r16
 260:	ff 90       	pop	r15
 262:	ef 90       	pop	r14
 264:	df 90       	pop	r13
 266:	cf 90       	pop	r12
 268:	08 95       	ret

0000026a <write_to_eeprom_1024>:

unsigned char write_to_eeprom_1024(unsigned char eeprom_write_address, uint16_t address, int num_bytes, unsigned char bytes_to_write[])
{
 26a:	ef 92       	push	r14
 26c:	ff 92       	push	r15
 26e:	0f 93       	push	r16
 270:	1f 93       	push	r17
 272:	cf 93       	push	r28
 274:	df 93       	push	r29
 276:	d6 2f       	mov	r29, r22
 278:	c7 2f       	mov	r28, r23
 27a:	8a 01       	movw	r16, r20
 27c:	79 01       	movw	r14, r18
	if(I2C_Start(EEPROM_Write_Addess) == 3)              /* Start I2C with device write address */
 27e:	80 ea       	ldi	r24, 0xA0	; 160
 280:	0e 94 4f 00 	call	0x9e	; 0x9e <I2C_Start>
 284:	83 30       	cpi	r24, 0x03	; 3
 286:	11 f1       	breq	.+68     	; 0x2cc <write_to_eeprom_1024+0x62>
	{
		//USART0_SendString("Failure With I2C_START\n");
		return 0x01;
	}
	if(I2C_Write((address >> 8) & 0xff) == 2)		/* Write MSB memory address for data write */
 288:	8c 2f       	mov	r24, r28
 28a:	0e 94 89 00 	call	0x112	; 0x112 <I2C_Write>
 28e:	82 30       	cpi	r24, 0x02	; 2
 290:	11 f1       	breq	.+68     	; 0x2d6 <write_to_eeprom_1024+0x6c>
	{
		//USART0_SendString("Failure With I2C_Write MSB ADDRESS\n");
		return 0x02;
	}
	if(I2C_Write(address & 0xff) == 2)		/* Write LSB memory address for data write */
 292:	8d 2f       	mov	r24, r29
 294:	0e 94 89 00 	call	0x112	; 0x112 <I2C_Write>
 298:	82 30       	cpi	r24, 0x02	; 2
 29a:	d1 f0       	breq	.+52     	; 0x2d0 <write_to_eeprom_1024+0x66>
 29c:	c0 e0       	ldi	r28, 0x00	; 0
 29e:	d0 e0       	ldi	r29, 0x00	; 0
 2a0:	09 c0       	rjmp	.+18     	; 0x2b4 <write_to_eeprom_1024+0x4a>
		//USART0_SendString("Failure With I2C_Write LSB ADDRESS\n");
		return 0x03;
	}
	for (int i = 0; i<num_bytes; i++)/* Write array data */
	{
		if(I2C_Write(bytes_to_write[i]) == 2)		/* Write start memory address for data write */
 2a2:	f7 01       	movw	r30, r14
 2a4:	ec 0f       	add	r30, r28
 2a6:	fd 1f       	adc	r31, r29
 2a8:	80 81       	ld	r24, Z
 2aa:	0e 94 89 00 	call	0x112	; 0x112 <I2C_Write>
 2ae:	82 30       	cpi	r24, 0x02	; 2
 2b0:	89 f0       	breq	.+34     	; 0x2d4 <write_to_eeprom_1024+0x6a>
	if(I2C_Write(address & 0xff) == 2)		/* Write LSB memory address for data write */
	{
		//USART0_SendString("Failure With I2C_Write LSB ADDRESS\n");
		return 0x03;
	}
	for (int i = 0; i<num_bytes; i++)/* Write array data */
 2b2:	21 96       	adiw	r28, 0x01	; 1
 2b4:	c0 17       	cp	r28, r16
 2b6:	d1 07       	cpc	r29, r17
 2b8:	a4 f3       	brlt	.-24     	; 0x2a2 <write_to_eeprom_1024+0x38>
		{
			//USART0_SendString("Failure With I2C_Write array Byte\n");
			return 0x04;
		}
	}
	I2C_Stop();
 2ba:	0e 94 a9 00 	call	0x152	; 0x152 <I2C_Stop>
 2be:	83 ed       	ldi	r24, 0xD3	; 211
 2c0:	90 e3       	ldi	r25, 0x30	; 48
 2c2:	01 97       	sbiw	r24, 0x01	; 1
 2c4:	f1 f7       	brne	.-4      	; 0x2c2 <write_to_eeprom_1024+0x58>
 2c6:	00 c0       	rjmp	.+0      	; 0x2c8 <write_to_eeprom_1024+0x5e>
 2c8:	00 00       	nop
	_delay_ms(50);
}
 2ca:	05 c0       	rjmp	.+10     	; 0x2d6 <write_to_eeprom_1024+0x6c>
unsigned char write_to_eeprom_1024(unsigned char eeprom_write_address, uint16_t address, int num_bytes, unsigned char bytes_to_write[])
{
	if(I2C_Start(EEPROM_Write_Addess) == 3)              /* Start I2C with device write address */
	{
		//USART0_SendString("Failure With I2C_START\n");
		return 0x01;
 2cc:	81 e0       	ldi	r24, 0x01	; 1
 2ce:	03 c0       	rjmp	.+6      	; 0x2d6 <write_to_eeprom_1024+0x6c>
		return 0x02;
	}
	if(I2C_Write(address & 0xff) == 2)		/* Write LSB memory address for data write */
	{
		//USART0_SendString("Failure With I2C_Write LSB ADDRESS\n");
		return 0x03;
 2d0:	83 e0       	ldi	r24, 0x03	; 3
 2d2:	01 c0       	rjmp	.+2      	; 0x2d6 <write_to_eeprom_1024+0x6c>
	for (int i = 0; i<num_bytes; i++)/* Write array data */
	{
		if(I2C_Write(bytes_to_write[i]) == 2)		/* Write start memory address for data write */
		{
			//USART0_SendString("Failure With I2C_Write array Byte\n");
			return 0x04;
 2d4:	84 e0       	ldi	r24, 0x04	; 4
		}
	}
	I2C_Stop();
	_delay_ms(50);
}
 2d6:	df 91       	pop	r29
 2d8:	cf 91       	pop	r28
 2da:	1f 91       	pop	r17
 2dc:	0f 91       	pop	r16
 2de:	ff 90       	pop	r15
 2e0:	ef 90       	pop	r14
 2e2:	08 95       	ret

000002e4 <main>:


int main(void)
{
	char array[10] = "ghaith";	/* Declare array to be print */
	USART0_Init(115200);
 2e4:	60 e0       	ldi	r22, 0x00	; 0
 2e6:	72 ec       	ldi	r23, 0xC2	; 194
 2e8:	81 e0       	ldi	r24, 0x01	; 1
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	0e 94 cc 01 	call	0x398	; 0x398 <USART0_Init>
	sei();
 2f0:	78 94       	sei
	char R;
	I2C_Init();			/* Initialize I2C */
 2f2:	0e 94 49 00 	call	0x92	; 0x92 <I2C_Init>
	uint8_t b = 0;
	while(1)
	{
		b = 0;
		USART0_SendString("Write To 256Kbit EEPROM\n");
 2f6:	80 ee       	ldi	r24, 0xE0	; 224
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	0e 94 db 01 	call	0x3b6	; 0x3b6 <USART0_SendString>
		write_to_eeprom(EEPROM_Write_Addess, 0x00, 64, bytes_to_write);
 2fe:	20 e6       	ldi	r18, 0x60	; 96
 300:	30 e0       	ldi	r19, 0x00	; 0
 302:	40 e4       	ldi	r20, 0x40	; 64
 304:	50 e0       	ldi	r21, 0x00	; 0
 306:	60 e0       	ldi	r22, 0x00	; 0
 308:	70 e0       	ldi	r23, 0x00	; 0
 30a:	80 ea       	ldi	r24, 0xA0	; 160
 30c:	0e 94 af 00 	call	0x15e	; 0x15e <write_to_eeprom>
		USART0_SendString("Read From 256Kbit EEPROM\n");
 310:	89 ef       	ldi	r24, 0xF9	; 249
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	0e 94 db 01 	call	0x3b6	; 0x3b6 <USART0_SendString>
		read_from_eeprom(EEPROM_Write_Addess, EEPROM_Read_Addess, 0x00, 64, bytes_to_read);
 318:	02 e4       	ldi	r16, 0x42	; 66
 31a:	11 e0       	ldi	r17, 0x01	; 1
 31c:	20 e4       	ldi	r18, 0x40	; 64
 31e:	30 e0       	ldi	r19, 0x00	; 0
 320:	40 e0       	ldi	r20, 0x00	; 0
 322:	50 e0       	ldi	r21, 0x00	; 0
 324:	61 ea       	ldi	r22, 0xA1	; 161
 326:	80 ea       	ldi	r24, 0xA0	; 160
 328:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <read_from_eeprom>
		USART0_SendString_Limitid(bytes_to_read, 64);
 32c:	60 e4       	ldi	r22, 0x40	; 64
 32e:	70 e0       	ldi	r23, 0x00	; 0
 330:	c8 01       	movw	r24, r16
 332:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <USART0_SendString_Limitid>
 336:	2f ef       	ldi	r18, 0xFF	; 255
 338:	83 ed       	ldi	r24, 0xD3	; 211
 33a:	90 e3       	ldi	r25, 0x30	; 48
 33c:	21 50       	subi	r18, 0x01	; 1
 33e:	80 40       	sbci	r24, 0x00	; 0
 340:	90 40       	sbci	r25, 0x00	; 0
 342:	e1 f7       	brne	.-8      	; 0x33c <main+0x58>
 344:	00 c0       	rjmp	.+0      	; 0x346 <main+0x62>
 346:	00 00       	nop
		_delay_ms(1000);
		USART0_SendString("Write To 1Mbit EEPROM\n");
 348:	83 e1       	ldi	r24, 0x13	; 19
 34a:	91 e0       	ldi	r25, 0x01	; 1
 34c:	0e 94 db 01 	call	0x3b6	; 0x3b6 <USART0_SendString>
		write_to_eeprom_1024(EEPROM_Write_Addess_1024_LOW, 0x00, 64, bytes_to_write);
 350:	20 e6       	ldi	r18, 0x60	; 96
 352:	30 e0       	ldi	r19, 0x00	; 0
 354:	40 e4       	ldi	r20, 0x40	; 64
 356:	50 e0       	ldi	r21, 0x00	; 0
 358:	60 e0       	ldi	r22, 0x00	; 0
 35a:	70 e0       	ldi	r23, 0x00	; 0
 35c:	84 ea       	ldi	r24, 0xA4	; 164
 35e:	0e 94 35 01 	call	0x26a	; 0x26a <write_to_eeprom_1024>
		USART0_SendString("Read From 1Mbit EEPROM\n");
 362:	8a e2       	ldi	r24, 0x2A	; 42
 364:	91 e0       	ldi	r25, 0x01	; 1
 366:	0e 94 db 01 	call	0x3b6	; 0x3b6 <USART0_SendString>
		read_from_eeprom(EEPROM_Write_Addess_1024_LOW, EEPROM_Read_Addess_1024_LOW, 0x00, 64, bytes_to_read);
 36a:	20 e4       	ldi	r18, 0x40	; 64
 36c:	30 e0       	ldi	r19, 0x00	; 0
 36e:	40 e0       	ldi	r20, 0x00	; 0
 370:	50 e0       	ldi	r21, 0x00	; 0
 372:	65 ea       	ldi	r22, 0xA5	; 165
 374:	84 ea       	ldi	r24, 0xA4	; 164
 376:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <read_from_eeprom>
		USART0_SendString_Limitid(bytes_to_read, 64);
 37a:	60 e4       	ldi	r22, 0x40	; 64
 37c:	70 e0       	ldi	r23, 0x00	; 0
 37e:	c8 01       	movw	r24, r16
 380:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <USART0_SendString_Limitid>
 384:	2f ef       	ldi	r18, 0xFF	; 255
 386:	8b e7       	ldi	r24, 0x7B	; 123
 388:	92 e9       	ldi	r25, 0x92	; 146
 38a:	21 50       	subi	r18, 0x01	; 1
 38c:	80 40       	sbci	r24, 0x00	; 0
 38e:	90 40       	sbci	r25, 0x00	; 0
 390:	e1 f7       	brne	.-8      	; 0x38a <main+0xa6>
 392:	00 c0       	rjmp	.+0      	; 0x394 <main+0xb0>
 394:	00 00       	nop
 396:	af cf       	rjmp	.-162    	; 0x2f6 <main+0x12>

00000398 <USART0_Init>:

char USART0_RxChar()									/* Data receiving function */
{
	while (!(UCSRA & (1 << RXC)));					/* Wait until new data receive */
	return(UDR);									/* Get and return received data */
}
 398:	8a b1       	in	r24, 0x0a	; 10
 39a:	88 69       	ori	r24, 0x98	; 152
 39c:	8a b9       	out	0x0a, r24	; 10
 39e:	80 b5       	in	r24, 0x20	; 32
 3a0:	86 68       	ori	r24, 0x86	; 134
 3a2:	80 bd       	out	0x20, r24	; 32
 3a4:	10 bc       	out	0x20, r1	; 32
 3a6:	88 e0       	ldi	r24, 0x08	; 8
 3a8:	89 b9       	out	0x09, r24	; 9
 3aa:	78 94       	sei
 3ac:	08 95       	ret

000003ae <USART0_TxChar>:

void USART0_TxChar(char data)						/* Data transmitting function */
{									/* Write data to be transmitting in UDR */
	while (!(UCSRA & (1<<UDRE)));					/* Wait until data transmit and buffer get empty */
 3ae:	5d 9b       	sbis	0x0b, 5	; 11
 3b0:	fe cf       	rjmp	.-4      	; 0x3ae <USART0_TxChar>
	UDR = data;	
 3b2:	8c b9       	out	0x0c, r24	; 12
 3b4:	08 95       	ret

000003b6 <USART0_SendString>:
}

void USART0_SendString(char *str)					/* Send string of USART data function */
{
 3b6:	0f 93       	push	r16
 3b8:	1f 93       	push	r17
 3ba:	cf 93       	push	r28
 3bc:	df 93       	push	r29
 3be:	8c 01       	movw	r16, r24
	int m=0;
 3c0:	c0 e0       	ldi	r28, 0x00	; 0
 3c2:	d0 e0       	ldi	r29, 0x00	; 0
	while (str[m]!=0)
 3c4:	03 c0       	rjmp	.+6      	; 0x3cc <USART0_SendString+0x16>
	{
		USART0_TxChar(str[m]);						/* Send each char of string till the NULL */
 3c6:	0e 94 d7 01 	call	0x3ae	; 0x3ae <USART0_TxChar>
		m++;
 3ca:	21 96       	adiw	r28, 0x01	; 1
}

void USART0_SendString(char *str)					/* Send string of USART data function */
{
	int m=0;
	while (str[m]!=0)
 3cc:	f8 01       	movw	r30, r16
 3ce:	ec 0f       	add	r30, r28
 3d0:	fd 1f       	adc	r31, r29
 3d2:	80 81       	ld	r24, Z
 3d4:	81 11       	cpse	r24, r1
 3d6:	f7 cf       	rjmp	.-18     	; 0x3c6 <USART0_SendString+0x10>
	{
		USART0_TxChar(str[m]);						/* Send each char of string till the NULL */
		m++;
	}
}
 3d8:	df 91       	pop	r29
 3da:	cf 91       	pop	r28
 3dc:	1f 91       	pop	r17
 3de:	0f 91       	pop	r16
 3e0:	08 95       	ret

000003e2 <USART0_SendString_Limitid>:

void USART0_SendString_Limitid(char *str, uint16_t len)					/* Send string of USART data function */
{
 3e2:	ef 92       	push	r14
 3e4:	ff 92       	push	r15
 3e6:	0f 93       	push	r16
 3e8:	1f 93       	push	r17
 3ea:	cf 93       	push	r28
 3ec:	df 93       	push	r29
 3ee:	7c 01       	movw	r14, r24
 3f0:	8b 01       	movw	r16, r22
	int m=0;
	for(m = 0; m < len; m++)
 3f2:	c0 e0       	ldi	r28, 0x00	; 0
 3f4:	d0 e0       	ldi	r29, 0x00	; 0
 3f6:	07 c0       	rjmp	.+14     	; 0x406 <__DATA_REGION_LENGTH__+0x6>
	{
		USART0_TxChar(str[m]);						/* Send each char of string till the NULL */
 3f8:	f7 01       	movw	r30, r14
 3fa:	ec 0f       	add	r30, r28
 3fc:	fd 1f       	adc	r31, r29
 3fe:	80 81       	ld	r24, Z
 400:	0e 94 d7 01 	call	0x3ae	; 0x3ae <USART0_TxChar>
}

void USART0_SendString_Limitid(char *str, uint16_t len)					/* Send string of USART data function */
{
	int m=0;
	for(m = 0; m < len; m++)
 404:	21 96       	adiw	r28, 0x01	; 1
 406:	c0 17       	cp	r28, r16
 408:	d1 07       	cpc	r29, r17
 40a:	b0 f3       	brcs	.-20     	; 0x3f8 <USART0_SendString_Limitid+0x16>
	{
		USART0_TxChar(str[m]);						/* Send each char of string till the NULL */
	}
 40c:	df 91       	pop	r29
 40e:	cf 91       	pop	r28
 410:	1f 91       	pop	r17
 412:	0f 91       	pop	r16
 414:	ff 90       	pop	r15
 416:	ef 90       	pop	r14
 418:	08 95       	ret

0000041a <_exit>:
 41a:	f8 94       	cli

0000041c <__stop_program>:
 41c:	ff cf       	rjmp	.-2      	; 0x41c <__stop_program>
